import random

import psycopg2
from telebot import types, TeleBot, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

import datebase

token_bot = '6898568209:AAFY8eTdxSakbFC-BJSDD6XZeLhmpgLlYVo'
conn = psycopg2.connect(database='english_russian', user='postgres', password='postgres')
data_for_query_new_word = []


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


def show_hint(*lines):
    return '\n'.join(lines)


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —É—á–µ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞üîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    EXIT = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


state_storage = StateMemoryStorage()
bot = TeleBot(token_bot, state_storage=state_storage)
print('Start telegram bot...')


@bot.message_handler(commands=['start'])
def start_command(message):
    id_user = message.from_user.id
    if datebase.check_id_user(conn, id_user):
        datebase.insert_user(conn, id_user, message.from_user.username)
        datebase.insert_users_words_start(conn, message.from_user.id)
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π —Å—Ç—É–¥–µ–Ω—Ç {message.from_user.username}, –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
    markup = types.ReplyKeyboardMarkup(row_width=3)

    global buttons
    buttons = []
    english_words = datebase.select_random_word_for_user(conn, id_user)
    target_word = random.choice(english_words)
    english_words.remove(target_word)
    other_words = english_words
    translate = datebase.translate_word(conn, target_word)
    target_word_btn = types.KeyboardButton(target_word)
    other_words_btns = [types.KeyboardButton(word) for word in random.sample(other_words, 4)]
    buttons.append(target_word_btn)
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    exit_btn = types.KeyboardButton(Command.EXIT)
    buttons.extend([next_btn, add_word_btn, delete_word_btn, exit_btn])
    markup.add(*buttons)
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = other_words


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    start_command(message)


@bot.message_handler(func=lambda message: message.text == Command.EXIT)
def exit_education(message):
    bot.send_message(message.chat.id, "–î–µ–ª—É –≤—Ä–µ–º—è, –ø–æ—Ç–µ—Ö–µ —á–∞—Å! –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á—ë–±—ã –≤–≤–µ–¥–∏—Ç–µ /start")


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ø—É–±–ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª—è—Ç—å –Ω–µ–ª—å–∑—è, —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ")
    bot.register_next_step_handler(message, del_word)


def del_word(message):
    english_word = message.text.lower()
    id_user = message.from_user.id
    res = datebase.delete_word(conn, id_user, english_word)
    if res == True:
        count = datebase.count_word(conn, id_user)
        bot.send_message(message.chat.id, f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω, —Ç–µ–ø–µ—Ä—å –≤ –Ω–µ–≥–æ –≤—Ö–æ–¥–∏—Ç {count} —Å–ª–æ–≤")
        start_command(message)
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç —Å—Ä–µ–¥–∏ –í–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ ")
        delete_word(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å")  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    bot.register_next_step_handler(message, english_word_input)


def english_word_input(message):
    english_word = message.text.lower()
    id_user = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –≤ –ë–î
    first_check = datebase.check_word_in_bd(conn, english_word)
    if not first_check:
        # —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –≤–æ–æ–±—â–µ –ë–î (–Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ, –Ω–∏ —Å—Ä–µ–¥–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö)
        # –ø–æ—ç—Ç–æ–º—É –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –ë–î –∏ –ø–æ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data_for_query_new_word.append(id_user)
        data_for_query_new_word.append(english_word)
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
        bot.register_next_step_handler(message, russian_word_input)
    else:
        # –µ—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î.
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–Ω–æ —É–∂–µ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        second_check = datebase.check_word_in_users_vocab(conn, first_check, id_user)
        if second_check:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É
            datebase.insert_id_user_id_word(conn, id_user, english_word)
            count = datebase.count_word(conn, id_user)
            bot.send_message(message.chat.id, f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω, —Ç–µ–ø–µ—Ä—å –≤ –Ω–µ–≥–æ –≤—Ö–æ–¥–∏—Ç {count} —Å–ª–æ–≤")
            bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—É—á–µ–Ω–∏–µ")
            start_command(message)
        else:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ, –æ–ø–æ–≤–µ—â–∞–µ–º –µ–≥–æ –æ–± —ç—Ç–æ–º
            bot.send_message(message.chat.id,
                             "–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ")
            add_word(message)


def russian_word_input(message):
    russian_word = message.text.lower()
    data_for_query_new_word.append(russian_word)
    # –∑–∞–Ω–æ—Å–∏–º —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü—É —Å–ª–æ–≤
    datebase.insert_word(conn, data_for_query_new_word[1], data_for_query_new_word[2], False)
    # –∑–∞–Ω–æ—Å–∏–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    datebase.insert_id_user_id_word(conn, data_for_query_new_word[0], data_for_query_new_word[1])
    count = datebase.count_word(conn, data_for_query_new_word[0])
    bot.send_message(message.chat.id, f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω, —Ç–µ–ø–µ—Ä—å –≤ –Ω–µ–≥–æ –≤—Ö–æ–¥–∏—Ç {count} —Å–ª–æ–≤")
    bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—É—á–µ–Ω–∏–µ")

    start_command(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            exit_btn = types.KeyboardButton(Command.EXIT)
            buttons.extend([next_btn, add_word_btn, delete_word_btn, exit_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.polling(skip_pending=True)
